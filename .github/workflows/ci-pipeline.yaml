name: CI Pipeline

on:
  push:
    branches-ignore:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: false
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Lint
        run: ./gradlew ktlintCheck

      - name: Build
        run: ./gradlew build

      - name: Test
        run: ./gradlew test

      - name: Package
        run: ./gradlew shadowJar

      - name: Upload JAR as artifact
        uses: actions/upload-artifact@v3
        with:
          name: autocommit
          path: build/libs/*.jar

  set_version_and_release:
    needs: build
    runs-on: ubuntu-latest
    # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      GITHUB_TOKEN: ${{ secrets.BYPASS_TOKEN }}

    steps:
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.BYPASS_TOKEN }}

      - name: Get Current Version
        id: get_current_version
        run: |
          version=$(grep -oP 'version\s*=\s*"\K[^"]+' build.gradle.kts)
          echo "Current version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Bump Version
        id: bump_version
        run: |
          current_version="${{ steps.get_current_version.outputs.version }}"
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            new_version="${{ github.event.inputs.version }}"
          else
            IFS='.' read -r major minor patch <<< "$current_version"
            new_patch=$((patch + 1))
            new_version="$major.$minor.$new_patch"
          fi
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

#      - name: Update Version in build.gradle.kts
#        run: |
#          sed -i 's/version = "[^"]*"/version = "${{ steps.bump_version.outputs.new_version }}"/' build.gradle.kts
#          git config --global user.email "github-actions[bot]@users.noreply.github.com"
#          git config --global user.name "github-actions[bot]"
#          git add build.gradle.kts
#          git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"
#          git push origin HEAD:main

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: autocommit
          path: ./build/libs

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.BYPASS_TOKEN }}
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          release_name: Release ${{ steps.bump_version.outputs.new_version }}
          draft: false
          prerelease: false

      - name: print dir
        run: |
          ls build/libs

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.BYPASS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/libs/git-auto-commit-cli-${{ steps.get_current_version.outputs.version }}-all.jar
          asset_name: git-auto-commit-cli-${{ steps.bump_version.outputs.new_version }}-all.jar
          asset_content_type: application/java-archive

      - name: Update Major Version Tag
        run: |
          git fetch --all --tags
          git tag -fa v1 -m "Update v1 tag to latest release"
          git push origin v1 --force

      - name: Update Version Tag
        run: |
          git tag -a v${{ steps.get_current_version.outputs.version }} -m "Release ${{ steps.bump_version.outputs.new_version }}"
          git push origin v${{ steps.bump_version.outputs.new_version }}
